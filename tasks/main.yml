---
# tasks file for ansible-adc
- name: Assert mandatory variables have been set
  ansible.builtin.assert: { that: "{{ item }} is defined" }
  with_items:
    - adc_administrator_username
    - adc_administrator_password
    - adc_dns_nics
    - adc_dns_servers
    - adc_domain
    - adc_domain_safe_mode_password
    - adc_required_psmodules
    - adc_required_features
    - adc_desired_dns_forwarders
    - adc_state
    - adc_install_dns
    - adc_read_only
    - adc_database_path
    - adc_domain_log_path
    - adc_sysvol_path

- name: Ensure the local user {{ adc_administrator_username }} has the password specified for the domain administrator
  ansible.windows.win_user:
    name: "{{ adc_administrator_username }}"
    password: "{{ adc_administrator_password }}"
    groups: administrators

- name: Ensure ansible_password matches the new password
  ansible.windows.ansible.builtin.set_fact:
    ansible_password: "{{ adc_administrator_password }}"

- name: Ensure upstream DNS servers is to {{ adc_dns_servers }}
  ansible.windows.win_dns_client:
   adapter_names: "{{ adc_dns_nics }}"
   ipv4_addresses: "{{ adc_dns_servers }}"

- name: Ensure that required DSC resources and Powershell Modules are present
  community.windows.win_psmodule:
    name: "{{ item }}"
    accept_license: true
    state: present
  with_items: "{{ adc_required_psmodules }}"

- name: Ensure required Windows Features are installed
  ansible.windows.win_feature:
    name: '{{ item }}'
    include_management_tools: yes
  with_items: "{{ adc_required_features }}"

- name: Promote server to Domain Controller
  ansible.windows.win_domain_controller :
    dns_domain_name: "{{ adc_domain }}"
    domain_admin_user: "{{ adc_administrator_username }}@{{ adc_domain }}"
    domain_admin_password: "{{ adc_administrator_password }}"
    safe_mode_password: "{{ adc_domain_safe_mode_password }}"
    state: "{{ adc_state }}"
    install_dns: "{{ adc_install_dns }}"
    read_only: "{{ adc_read_only }}"
    database_path: "{{ adc_database_path }}"
    sysvol_path: "{{ adc_sysvol_path }}"
    domain_log_path: "{{ adc_domain_log_path }}"
  register: adc_install_domain
  notify: Reboot if the Active Directory requires it
  when: not ansible_windows_domain_member

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  ansible.builtin.meta: flush_handlers

- name: Ensure a Domain Controller is available in the domain
  ansible.windows.win_dsc:
    resource_name: WaitForADDomain
    DomainName: "{{ adc_domain }}"

- name: Ensure DNS Forwarders are set to desired forwarders
  ansible.windows.win_shell: |
    Try {
      $CurrentForwarders = $([Array]$(Get-DnsServerForwarder).IPAddress.IPAddressToString)
      $DesiredForwarders = ConvertFrom-JSON '{{ adc_desired_dns_forwarders | to_json }}'
      if ($CurrentForwarders) {
        if ($Null -ne $(Compare-Object $CurrentForwarders $DesiredForwarders)) {
          Set-DNSServerForwarder -IPAddress $DesiredForwarders
          Exit 1
        } Else {
          Exit 0
        }
      } Else {
        Set-DNSServerForwarder -IPAddress $DesiredForwarders
        Exit 1
      }
    }
    Catch {
      Exit 2
    }
  register: dns_forwarders
  changed_when: dns_forwarders.rc == 1
  failed_when: dns_forwarders.rc == 2
